// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "gettext.h"
#include "dx_dialog.h"
#include "Fl_Text_Buffer_mod.H"
#include <FL/Fl_Color_Chooser.H>
#include <FL/fl_show_colormap.H>
#include "dx_cluster.h"
#include "flcluster.h"
static Fl_Text_Buffer_mod telnet_txt_buffer; 
static Fl_Text_Buffer_mod telnet_view_buffer; 

static void cbDXC_FontBrowser(Fl_Widget*, void*) {
  Fl_Font font = font_browser->fontNumber();
  int size = font_browser->fontSize();
  Fl_Color color = font_browser->fontColor();
  
  progStatus.DXC_textcolor = color;
  progStatus.DXC_textfont = font;
  progStatus.DXC_textsize = size;
  
  DXC_display->textcolor(color);
  DXC_display->textfont(font);
  DXC_display->textsize(size);
  DXC_display->redraw();
  
  reports_header->redraw();
  
  brws_dx_cluster->redraw();
        
  font_browser->hide();
  
  dxc_lines();
}

static void cbDX_FontBrowser(Fl_Widget*, void*) {
  Fl_Font font = font_browser->fontNumber();
  int size = font_browser->fontSize();
  Fl_Color color = font_browser->fontColor();
  
  progStatus.DXfontcolor = color;
  progStatus.DXfontnbr = font;
  progStatus.DXfontsize = size;
  
  brws_tcpip_stream->setFont(font);
  brws_tcpip_stream->setFontSize(size);
  brws_tcpip_stream->setFontColor(color, FTextBase::RECV);
  brws_tcpip_stream->redraw();
  
  ed_telnet_cmds->setFont(font);
  ed_telnet_cmds->setFontSize(size);
  ed_telnet_cmds->setFontColor(color);
  ed_telnet_cmds->redraw();
  
  StreamText->textcolor(color);
  StreamText->textfont(font);
  StreamText->textsize(size);
  StreamText->redraw();
  
  brws_dxc_help->color(fl_rgb_color(
      progStatus.DX_Color_R,
      progStatus.DX_Color_G,
      progStatus.DX_Color_B));    
  brws_dxc_help->setFont(font);
  brws_dxc_help->setFontSize(size);
  brws_dxc_help->setFontColor(color, FTextBase::RECV);
  brws_dxc_help->redraw();
         
  font_browser->hide();
  
  dxcluster_hosts_load();
}

static void choose_color(Fl_Color & c) {
  unsigned char r, g, b;
  Fl::get_color(c, r, g, b);
  if (fl_color_chooser("Font color", r, g, b))
      c = fl_rgb_color(r, g, b);
}

static void cb_mnuExit(Fl_Menu_*, void*) {
  cb_Exit();
}

static void cb_mnu_help(Fl_Menu_*, void*) {
  show_help();
}

unsigned char menu__i18n_done = 0;
Fl_Menu_Item menu_[] = {
 {"File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"E&xit", 0,  (Fl_Callback*)cb_mnuExit, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Help", 0,  (Fl_Callback*)cb_mnu_help, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Group *btn_select_host=(Fl_Group *)0;

Fl_Input2 *inp_dxcc_host_url=(Fl_Input2 *)0;

static void cb_inp_dxcc_host_url(Fl_Input2* o, void*) {
  progStatus.dxcc_host_url=o->value();
progStatus.changed = true;
}

Fl_Button *btn_show_host_tab=(Fl_Button *)0;

static void cb_btn_show_host_tab(Fl_Button*, void*) {
  cluster_tabs->value(tabDXclusterConfig);
cluster_tabs->redraw();
}

Fl_Input2 *inp_dccc_host_port=(Fl_Input2 *)0;

static void cb_inp_dccc_host_port(Fl_Input2* o, void*) {
  progStatus.dxcc_host_port=o->value();
progStatus.changed = true;
}

Fl_Input2 *inp_dccc_login=(Fl_Input2 *)0;

static void cb_inp_dccc_login(Fl_Input2* o, void*) {
  progStatus.dxcc_login=o->value();
progStatus.changed = true;
}

Fl_Input2 *inp_dxcc_password=(Fl_Input2 *)0;

static void cb_inp_dxcc_password(Fl_Input2* o, void*) {
  progStatus.dxcc_password = o->value();
}

Fl_Button *btnDXCLUSTERpasswordShow=(Fl_Button *)0;

static void cb_btnDXCLUSTERpasswordShow(Fl_Button*, void*) {
  inp_dxcc_password->type(inp_dxcc_password->type() ^ FL_SECRET_INPUT);
inp_dxcc_password->redraw();
}

Fl_Check_Button *btn_dxcc_connect=(Fl_Check_Button *)0;

static void cb_btn_dxcc_connect(Fl_Check_Button* o, void*) {
  progStatus.cluster_connected=o->value();
DXcluster_connect(o->value());
}

Fl_Box *lbl_dxc_connected=(Fl_Box *)0;

Fl_Check_Button *btn_dxc_auto_connect=(Fl_Check_Button *)0;

static void cb_btn_dxc_auto_connect(Fl_Check_Button* o, void*) {
  progStatus.dxc_auto_connect = o->value();
progStatus.changed = true;
}

Fl_Tabs *cluster_tabs=(Fl_Tabs *)0;

Fl_Group *tabDXclusterTelNetStream=(Fl_Group *)0;

Fl_Group *gp_resize_telnet=(Fl_Group *)0;

FTextView *brws_tcpip_stream=(FTextView *)0;

Fl_Button *dxc_macro_1=(Fl_Button *)0;

Fl_Button *dxc_macro_2=(Fl_Button *)0;

Fl_Button *dxc_macro_3=(Fl_Button *)0;

Fl_Button *dxc_macro_4=(Fl_Button *)0;

Fl_Button *dxc_macro_5=(Fl_Button *)0;

Fl_Button *dxc_macro_6=(Fl_Button *)0;

Fl_Button *dxc_macro_7=(Fl_Button *)0;

Fl_Button *dxc_macro_8=(Fl_Button *)0;

Fl_Group *gp_spot_cmds=(Fl_Group *)0;

Fl_Input2 *inp_dxcluster_cmd=(Fl_Input2 *)0;

static void cb_inp_dxcluster_cmd(Fl_Input2*, void*) {
  DXcluster_submit();
}

Fl_Button *btn_cluster_spot=(Fl_Button *)0;

static void cb_btn_cluster_spot(Fl_Button*, void*) {
  send_DXcluster_spot();
}

Fl_Button *btn_cluster_submit=(Fl_Button *)0;

static void cb_btn_cluster_submit(Fl_Button*, void*) {
  DXcluster_submit();
}

Fl_Group *tabDXclusterReports=(Fl_Group *)0;

Fl_Browser *reports_header=(Fl_Browser *)0;

Fl_Browser *brws_dx_cluster=(Fl_Browser *)0;

static void cb_brws_dx_cluster(Fl_Browser*, void*) {
  DXcluster_select();
}

Fl_Button *btn_dxc_cluster_clear=(Fl_Button *)0;

static void cb_btn_dxc_cluster_clear(Fl_Button*, void*) {
  brws_dx_cluster->clear();
}

Fl_Check_Button *brws_order=(Fl_Check_Button *)0;

static void cb_brws_order(Fl_Check_Button* o, void*) {
  progStatus.dxc_topline = o->value();
dxc_lines();
progStatus.changed=true;
}

Fl_Button *btn_cluster_spot2=(Fl_Button *)0;

static void cb_btn_cluster_spot2(Fl_Button*, void*) {
  send_DXcluster_spot();
}

Fl_Output *txtTOD=(Fl_Output *)0;

Fl_Box *box_keepalive=(Fl_Box *)0;

Fl_Button *btn_dxc_cluster_align=(Fl_Button *)0;

static void cb_btn_dxc_cluster_align(Fl_Button*, void*) {
  //dxc_lines();
dxc_column_widths();
}

Fl_Group *tabDXclusterConfig=(Fl_Group *)0;

Fl_Group *cc_resize_1=(Fl_Group *)0;

Fl_Browser *brws_dxcluster_hosts=(Fl_Browser *)0;

Fl_Button *btn_dxcluster_hosts_select=(Fl_Button *)0;

Fl_Button *btn_dxcluster_hosts_add=(Fl_Button *)0;

Fl_Button *btn_dxcluster_hosts_delete=(Fl_Button *)0;

Fl_Button *btn_dxcluster_servers=(Fl_Button *)0;

Fl_Group *gp_resize_dummy1=(Fl_Group *)0;

FTextEdit *ed_telnet_cmds=(FTextEdit *)0;

Fl_Button *btn_dxcluster_hosts_load_setup=(Fl_Button *)0;

Fl_Button *btn_dxcluster_hosts_save_setup=(Fl_Button *)0;

Fl_Button *btn_dxcluster_hosts_send_setup=(Fl_Button *)0;

Fl_Group *gp_resize_dummy2=(Fl_Group *)0;

Fl_Check_Button *btn_spot_when_logged=(Fl_Check_Button *)0;

static void cb_btn_spot_when_logged(Fl_Check_Button* o, void*) {
  progStatus.spot_when_logged = o->value();
progStatus.changed = true;
}

Fl_Check_Button *btn_dxc_hertz=(Fl_Check_Button *)0;

static void cb_btn_dxc_hertz(Fl_Check_Button* o, void*) {
  progStatus.dxc_hertz = o->value();
progStatus.changed = true;
}

Fl_Input *mlabel_1=(Fl_Input *)0;

static void cb_mlabel_1(Fl_Input* o, void*) {
  progStatus.dxcm_label_1=o->value();
dxc_macro_1->label(progStatus.dxcm_label_1.c_str());
progStatus.changed=true;
}

Fl_Input2 *mtext_1=(Fl_Input2 *)0;

static void cb_mtext_1(Fl_Input2* o, void*) {
  progStatus.dxcm_text_1=o->value();
progStatus.changed=true;
}

Fl_Input *mlabel_2=(Fl_Input *)0;

static void cb_mlabel_2(Fl_Input* o, void*) {
  progStatus.dxcm_label_2=o->value();
dxc_macro_2->label(progStatus.dxcm_label_2.c_str());
progStatus.changed=true;
}

Fl_Input2 *mtext_2=(Fl_Input2 *)0;

static void cb_mtext_2(Fl_Input2* o, void*) {
  progStatus.dxcm_text_2=o->value();
progStatus.changed=true;
}

Fl_Input *mlabel_3=(Fl_Input *)0;

static void cb_mlabel_3(Fl_Input* o, void*) {
  progStatus.dxcm_label_3=o->value();
dxc_macro_3->label(progStatus.dxcm_label_3.c_str());
progStatus.changed=true;
}

Fl_Input2 *mtext_3=(Fl_Input2 *)0;

static void cb_mtext_3(Fl_Input2* o, void*) {
  progStatus.dxcm_text_3=o->value();
progStatus.changed=true;
}

Fl_Input *mlabel_4=(Fl_Input *)0;

static void cb_mlabel_4(Fl_Input* o, void*) {
  progStatus.dxcm_label_4=o->value();
dxc_macro_4->label(progStatus.dxcm_label_4.c_str());
progStatus.changed=true;
}

Fl_Input2 *mtext_4=(Fl_Input2 *)0;

static void cb_mtext_4(Fl_Input2* o, void*) {
  progStatus.dxcm_text_4=o->value();
progStatus.changed=true;
}

Fl_Input *mlabel_5=(Fl_Input *)0;

static void cb_mlabel_5(Fl_Input* o, void*) {
  progStatus.dxcm_label_5=o->value();
dxc_macro_5->label(progStatus.dxcm_label_5.c_str());
progStatus.changed=true;
}

Fl_Input2 *mtext_5=(Fl_Input2 *)0;

static void cb_mtext_5(Fl_Input2* o, void*) {
  progStatus.dxcm_text_5=o->value();
progStatus.changed=true;
}

Fl_Input *mlabel_6=(Fl_Input *)0;

static void cb_mlabel_6(Fl_Input* o, void*) {
  progStatus.dxcm_label_6=o->value();
dxc_macro_6->label(progStatus.dxcm_label_6.c_str());
progStatus.changed=true;
}

Fl_Input2 *mtext_6=(Fl_Input2 *)0;

static void cb_mtext_6(Fl_Input2* o, void*) {
  progStatus.dxcm_text_6=o->value();
progStatus.changed=true;
}

Fl_Input *mlabel_7=(Fl_Input *)0;

static void cb_mlabel_7(Fl_Input* o, void*) {
  progStatus.dxcm_label_7=o->value();
dxc_macro_7->label(progStatus.dxcm_label_7.c_str());
progStatus.changed=true;
}

Fl_Input2 *mtext_7=(Fl_Input2 *)0;

static void cb_mtext_7(Fl_Input2* o, void*) {
  progStatus.dxcm_text_7=o->value();
progStatus.changed=true;
}

Fl_Input *mlabel_8=(Fl_Input *)0;

static void cb_mlabel_8(Fl_Input* o, void*) {
  progStatus.dxcm_label_8=o->value();
dxc_macro_8->label(progStatus.dxcm_label_8.c_str());
progStatus.changed=true;
}

Fl_Input2 *mtext_8=(Fl_Input2 *)0;

static void cb_mtext_8(Fl_Input2* o, void*) {
  progStatus.dxcm_text_8=o->value();
progStatus.changed=true;
}

Fl_Button *btn_dxcluster_ar_help=(Fl_Button *)0;

Fl_Button *btn_dxcluster_cc_help=(Fl_Button *)0;

Fl_Button *btn_dxcluster_dx_help=(Fl_Button *)0;

Fl_Group *tabIOconfig=(Fl_Group *)0;

Fl_Check_Button *btn_connect_to_fldigi=(Fl_Check_Button *)0;

static void cb_btn_connect_to_fldigi(Fl_Check_Button* o, void*) {
  progStatus.connect_to_fldigi = o->value();
}

Fl_Input *inp_fldigi_address=(Fl_Input *)0;

static void cb_inp_fldigi_address(Fl_Input* o, void*) {
  progStatus.fldigi_address=o->value();
}

Fl_Input *inp_fldigi_port=(Fl_Input *)0;

static void cb_inp_fldigi_port(Fl_Input* o, void*) {
  progStatus.fldigi_port=o->value();
}

Fl_Box *lbl_fldigi_connected=(Fl_Box *)0;

Fl_Counter *intPSKsweetspot=(Fl_Counter *)0;

static void cb_intPSKsweetspot(Fl_Counter* o, void*) {
  progStatus.PSKsweetspot=(int)o->value();
}

Fl_Check_Button *btn_PSK_on_USB=(Fl_Check_Button *)0;

static void cb_btn_PSK_on_USB(Fl_Check_Button* o, void*) {
  progStatus.USB = o->value();
}

Fl_Counter *intCWsweetspot=(Fl_Counter *)0;

static void cb_intCWsweetspot(Fl_Counter* o, void*) {
  progStatus.CWsweetspot=(int)o->value();
}

Fl_Check_Button *btn_cw_mode_is_USB=(Fl_Check_Button *)0;

static void cb_btn_cw_mode_is_USB(Fl_Check_Button* o, void*) {
  progStatus.USBCW = o->value();
if (progStatus.USBCW) {
  progStatus.LSBCW = 0;
  btn_cw_mode_is_LSB->value(0);
  btn_cw_mode_is_CW->value(0);
};
}

Fl_Check_Button *btn_cw_mode_is_LSB=(Fl_Check_Button *)0;

static void cb_btn_cw_mode_is_LSB(Fl_Check_Button* o, void*) {
  progStatus.LSBCW = o->value();
if (progStatus.LSBCW) {
  progStatus.USBCW = 0;
  btn_cw_mode_is_USB->value(0);
  btn_cw_mode_is_CW->value(0);
};
}

Fl_Check_Button *btn_cw_mode_is_CW=(Fl_Check_Button *)0;

static void cb_btn_cw_mode_is_CW(Fl_Check_Button* o, void*) {
  if (o->value()) {
  progStatus.USBCW = 0;
  progStatus.LSBCW = 0;
  btn_cw_mode_is_USB->value(0);
  btn_cw_mode_is_LSB->value(0);
};
}

Fl_Check_Button *btn_rtty_is_mark=(Fl_Check_Button *)0;

static void cb_btn_rtty_is_mark(Fl_Check_Button* o, void*) {
  progStatus.useMARKfreq = o->value();
}

Fl_Counter *intRTTYsweetspot=(Fl_Counter *)0;

static void cb_intRTTYsweetspot(Fl_Counter* o, void*) {
  progStatus.RTTYsweetspot=(int)o->value();
}

Fl_Input *serversURL=(Fl_Input *)0;

static void cb_serversURL(Fl_Input* o, void*) {
  progStatus.serversURL=o->value();
}

Fl_Input *AR_help_URL=(Fl_Input *)0;

static void cb_AR_help_URL(Fl_Input* o, void*) {
  progStatus.AR_help_URL=o->value();
}

Fl_Input *CC_help_URL=(Fl_Input *)0;

static void cb_CC_help_URL(Fl_Input* o, void*) {
  progStatus.CC_help_URL=o->value();
}

Fl_Input *DX_help_URL=(Fl_Input *)0;

static void cb_DX_help_URL(Fl_Input* o, void*) {
  progStatus.DX_help_URL=o->value();
}

Fl_Group *gp_resize_io=(Fl_Group *)0;

Fl_Group *tabUserConfig=(Fl_Group *)0;

Fl_Input *inp_myCall=(Fl_Input *)0;

static void cb_inp_myCall(Fl_Input* o, void*) {
  progStatus.myCall = o->value();
}

Fl_Input *inp_myName=(Fl_Input *)0;

static void cb_inp_myName(Fl_Input* o, void*) {
  progStatus.myName = o->value();
}

Fl_Input *inp_myQth=(Fl_Input *)0;

static void cb_inp_myQth(Fl_Input* o, void*) {
  progStatus.myQth = o->value();
}

Fl_Input *inp_myLocator=(Fl_Input *)0;

static void cb_inp_myLocator(Fl_Input* o, void*) {
  progStatus.myLocator = o->value();
}

Fl_Button *btn_send_name=(Fl_Button *)0;

static void cb_btn_send_name(Fl_Button*, void*) {
  send_name();
}

Fl_Button *btn_send_qth=(Fl_Button *)0;

static void cb_btn_send_qth(Fl_Button*, void*) {
  send_qth();
}

Fl_Button *btn_send_qra=(Fl_Button *)0;

static void cb_btn_send_qra(Fl_Button*, void*) {
  send_qra();
}

Fl_Output *DXC_display=(Fl_Output *)0;

Fl_Button *btn_DXC_font=(Fl_Button *)0;

static void cb_btn_DXC_font(Fl_Button*, void*) {
  font_browser->fontNumber(progStatus.DXC_textfont);
font_browser->fontSize(progStatus.DXC_textsize);
font_browser->fontColor(progStatus.DXC_textcolor);
font_browser->fontFilter(Font_Browser::FIXED_WIDTH);
font_browser->callback(cbDXC_FontBrowser);
font_browser->show();
}

Fl_Button *btnDXCdefault_colors_font=(Fl_Button *)0;

static void cb_btnDXCdefault_colors_font(Fl_Button*, void*) {
  progStatus.DXC_textfont = FL_COURIER;
progStatus.DXC_textsize = 14;
progStatus.DXC_textcolor = FL_BLACK;
progStatus.DXC_even_color = 7;
progStatus.DXC_odd_color = 246;

DXC_display->textsize(progStatus.DXC_textsize);
DXC_display->textcolor(progStatus.DXC_textcolor);
DXC_display->textfont(progStatus.DXC_textfont);

DXC_display->redraw();
}

Fl_Button *btn_DXC_even_lines=(Fl_Button *)0;

static void cb_btn_DXC_even_lines(Fl_Button* o, void*) {
  progStatus.DXC_even_color = fl_show_colormap((Fl_Color)progStatus.DXC_even_color);
o->color(progStatus.DXC_even_color);
o->redraw();
}

Fl_Button *btn_DXC_odd_lines=(Fl_Button *)0;

static void cb_btn_DXC_odd_lines(Fl_Button* o, void*) {
  progStatus.DXC_odd_color = fl_show_colormap((Fl_Color)progStatus.DXC_odd_color);
o->color(progStatus.DXC_odd_color);
o->redraw();
}

Fl_Input *StreamText=(Fl_Input *)0;

Fl_Button *btnDXcolor=(Fl_Button *)0;

static void cb_btnDXcolor(Fl_Button*, void*) {
  uchar r, g, b;
r = progStatus.DX_Color_R;
g = progStatus.DX_Color_G;
b = progStatus.DX_Color_B;

if (!fl_color_chooser("DX Color", r, g, b))
    return;

progStatus.DX_Color_R = r;
progStatus.DX_Color_G = g;
progStatus.DX_Color_B = b;

StreamText->color(fl_rgb_color(r,g,b));
StreamText->redraw();

brws_tcpip_stream->color(
	StreamText->color(),
	fl_contrast(progStatus.DXfontcolor, StreamText->color()));


brws_tcpip_stream->redraw();

brws_dxcluster_hosts->color(fl_rgb_color(
    progStatus.DX_Color_R,
    progStatus.DX_Color_G,
    progStatus.DX_Color_B));
brws_dxcluster_hosts->textcolor(progStatus.DXfontcolor);
brws_dxcluster_hosts->textfont(progStatus.DXfontnbr);
brws_dxcluster_hosts->textsize(progStatus.DXfontsize);
brws_dxcluster_hosts->redraw();

brws_dxc_help->color(fl_rgb_color(r,g,b));
brws_dxc_help->setFont(progStatus.DXfontnbr);
brws_dxc_help->setFontSize(progStatus.DXfontsize);
brws_dxc_help->setFontColor(progStatus.DXfontcolor, FTextBase::RECV);
brws_dxc_help->redraw();
    
ed_telnet_cmds->color(fl_rgb_color(r,g,b));
ed_telnet_cmds->redraw();

dxcluster_hosts_load();
}

Fl_Button *btnDXfont=(Fl_Button *)0;

static void cb_btnDXfont(Fl_Button*, void*) {
  font_browser->fontNumber(progStatus.DXfontnbr);

font_browser->fontSize(progStatus.DXfontsize);

font_browser->fontColor(progStatus.DXfontcolor);

font_browser->fontFilter(Font_Browser::FIXED_WIDTH);

font_browser->callback(cbDX_FontBrowser);

brws_tcpip_stream->color(
	StreamText->color(),
	fl_contrast(progStatus.DXfontcolor, StreamText->color()));

font_browser->show();
}

Fl_Button *btnDXalt_color=(Fl_Button *)0;

static void cb_btnDXalt_color(Fl_Button* o, void*) {
  choose_color(progStatus.DXalt_color);

o->labelcolor(progStatus.DXalt_color);
o->redraw_label();

brws_tcpip_stream->setFontColor(progStatus.DXalt_color, FTextBase::XMIT);

brws_tcpip_stream->redraw();
}

Fl_Button *btnDXdefault_colors_font=(Fl_Button *)0;

static void cb_btnDXdefault_colors_font(Fl_Button*, void*) {
  progStatus.DX_Color_R = 255;
progStatus.DX_Color_G = 255;
progStatus.DX_Color_B = 255;

progStatus.DXfontnbr = FL_COURIER;
progStatus.DXfontsize = 14;
progStatus.DXfontcolor = FL_BLACK;
progStatus.DXalt_color = fl_rgb_color(200, 0, 0);
btnDXalt_color->labelcolor(progStatus.DXalt_color);
btnDXalt_color->redraw_label();

brws_tcpip_stream->color(fl_rgb_color(
    progStatus.DX_Color_R,
    progStatus.DX_Color_G,
    progStatus.DX_Color_B));
brws_tcpip_stream->setFont(progStatus.DXfontnbr);
brws_tcpip_stream->setFontSize(progStatus.DXfontsize);
brws_tcpip_stream->setFontColor(progStatus.DXfontcolor, FTextBase::RECV);
brws_tcpip_stream->setFontColor(progStatus.DXalt_color, FTextBase::XMIT);
brws_tcpip_stream->redraw();

ed_telnet_cmds->color(fl_rgb_color(
    progStatus.DX_Color_R,
    progStatus.DX_Color_G,
    progStatus.DX_Color_B));
ed_telnet_cmds->setFont(progStatus.DXfontnbr);
ed_telnet_cmds->setFontSize(progStatus.DXfontsize);
ed_telnet_cmds->setFontColor(progStatus.DXfontcolor);
ed_telnet_cmds->redraw();

brws_dxc_help->color(fl_rgb_color(
    progStatus.DX_Color_R,
    progStatus.DX_Color_G,
    progStatus.DX_Color_B));
brws_dxc_help->setFont(progStatus.DXfontnbr);
brws_dxc_help->setFontSize(progStatus.DXfontsize);
brws_dxc_help->setFontColor(progStatus.DXfontcolor, FTextBase::RECV);
brws_dxc_help->redraw();

StreamText->color(fl_rgb_color(
    progStatus.DX_Color_R,
    progStatus.DX_Color_G,
    progStatus.DX_Color_B));
StreamText->textcolor(progStatus.DXfontcolor);
StreamText->redraw();

dxcluster_hosts_load();

font_browser->hide();
}

Fl_Round_Button *btn_zero_keepalive=(Fl_Round_Button *)0;

static void cb_btn_zero_keepalive(Fl_Round_Button* o, void*) {
  progStatus.keepalive = 0;
o->value(1);
btn_one_keepalive->value(0);
btn_five_keepalive->value(0);
btn_ten_keepalive->value(0);
}

Fl_Round_Button *btn_one_keepalive=(Fl_Round_Button *)0;

static void cb_btn_one_keepalive(Fl_Round_Button* o, void*) {
  progStatus.keepalive = 1;
o->value(1);
btn_zero_keepalive->value(0);
btn_five_keepalive->value(0);
btn_ten_keepalive->value(0);
}

Fl_Round_Button *btn_five_keepalive=(Fl_Round_Button *)0;

static void cb_btn_five_keepalive(Fl_Round_Button* o, void*) {
  progStatus.keepalive = 5;
o->value(1);
btn_zero_keepalive->value(0);
btn_one_keepalive->value(0);
btn_ten_keepalive->value(0);
}

Fl_Round_Button *btn_ten_keepalive=(Fl_Round_Button *)0;

static void cb_btn_ten_keepalive(Fl_Round_Button* o, void*) {
  progStatus.keepalive = 10;
o->value(1);
btn_zero_keepalive->value(0);
btn_one_keepalive->value(0);
btn_five_keepalive->value(0);
}

Fl_Group *grp_misc=(Fl_Group *)0;

Fl_Check_Button *btn_tooltips=(Fl_Check_Button *)0;

static void cb_btn_tooltips(Fl_Check_Button* o, void*) {
  progStatus.tooltips=o->value();
Fl_Tooltip::enable(progStatus.tooltips);
}

Fl_Group *grp_resize_uc=(Fl_Group *)0;

Fl_Group *tabDXclusterHelp=(Fl_Group *)0;

FTextView *brws_dxc_help=(FTextView *)0;

Fl_Button *btn_dxc_help_query=(Fl_Button *)0;

static void cb_btn_dxc_help_query(Fl_Button*, void*) {
  dxc_help_query();
}

Fl_Input2 *inp_help_string=(Fl_Input2 *)0;

static void cb_inp_help_string(Fl_Input2*, void*) {
  dxc_help_query();
}

Fl_Button *btn_dxc_help_clear=(Fl_Button *)0;

static void cb_btn_dxc_help_clear(Fl_Button*, void*) {
  dxc_help_clear();
}

Fl_Double_Window* dxc_window() {
  Fl_Double_Window* w;
  font_browser = new Font_Browser;
  { Fl_Double_Window* o = new Fl_Double_Window(680, 420, _("DX Cluster Spotting"));
    w = o; if (w) {/* empty */}
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 680, 22);
      if (!menu__i18n_done) {
        int i=0;
        for ( ; i<4; i++)
          if (menu_[i].label())
            menu_[i].label(_(menu_[i].label()));
        menu__i18n_done = 1;
      }
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Fl_Group* o = btn_select_host = new Fl_Group(0, 25, 678, 50);
      btn_select_host->box(FL_ENGRAVED_BOX);
      { Fl_Input2* o = inp_dxcc_host_url = new Fl_Input2(5, 48, 256, 22, _("DX HOST hostname/IP"));
        inp_dxcc_host_url->tooltip(_("telnet server URL"));
        inp_dxcc_host_url->box(FL_DOWN_BOX);
        inp_dxcc_host_url->color(FL_BACKGROUND2_COLOR);
        inp_dxcc_host_url->selection_color(FL_SELECTION_COLOR);
        inp_dxcc_host_url->labeltype(FL_NORMAL_LABEL);
        inp_dxcc_host_url->labelfont(0);
        inp_dxcc_host_url->labelsize(14);
        inp_dxcc_host_url->labelcolor(FL_FOREGROUND_COLOR);
        inp_dxcc_host_url->callback((Fl_Callback*)cb_inp_dxcc_host_url);
        inp_dxcc_host_url->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        inp_dxcc_host_url->when(FL_WHEN_RELEASE);
        o->value(progStatus.dxcc_host_url.c_str());
      } // Fl_Input2* inp_dxcc_host_url
      { btn_show_host_tab = new Fl_Button(262, 48, 20, 22, _("@2>"));
        btn_show_host_tab->callback((Fl_Callback*)cb_btn_show_host_tab);
      } // Fl_Button* btn_show_host_tab
      { Fl_Input2* o = inp_dccc_host_port = new Fl_Input2(284, 48, 50, 22, _("Port"));
        inp_dccc_host_port->tooltip(_("telnet server port"));
        inp_dccc_host_port->box(FL_DOWN_BOX);
        inp_dccc_host_port->color(FL_BACKGROUND2_COLOR);
        inp_dccc_host_port->selection_color(FL_SELECTION_COLOR);
        inp_dccc_host_port->labeltype(FL_NORMAL_LABEL);
        inp_dccc_host_port->labelfont(0);
        inp_dccc_host_port->labelsize(14);
        inp_dccc_host_port->labelcolor(FL_FOREGROUND_COLOR);
        inp_dccc_host_port->callback((Fl_Callback*)cb_inp_dccc_host_port);
        inp_dccc_host_port->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        inp_dccc_host_port->when(FL_WHEN_RELEASE);
        o->value(progStatus.dxcc_host_port.c_str());
      } // Fl_Input2* inp_dccc_host_port
      { Fl_Input2* o = inp_dccc_login = new Fl_Input2(335, 48, 80, 22, _("Login as"));
        inp_dccc_login->tooltip(_("login call sign"));
        inp_dccc_login->box(FL_DOWN_BOX);
        inp_dccc_login->color(FL_BACKGROUND2_COLOR);
        inp_dccc_login->selection_color(FL_SELECTION_COLOR);
        inp_dccc_login->labeltype(FL_NORMAL_LABEL);
        inp_dccc_login->labelfont(0);
        inp_dccc_login->labelsize(14);
        inp_dccc_login->labelcolor(FL_FOREGROUND_COLOR);
        inp_dccc_login->callback((Fl_Callback*)cb_inp_dccc_login);
        inp_dccc_login->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        inp_dccc_login->when(FL_WHEN_RELEASE);
        o->value(progStatus.dxcc_login.c_str());
      } // Fl_Input2* inp_dccc_login
      { Fl_Input2* o = inp_dxcc_password = new Fl_Input2(419, 48, 80, 22, _("Password"));
        inp_dxcc_password->tooltip(_("Your login password"));
        inp_dxcc_password->box(FL_DOWN_BOX);
        inp_dxcc_password->color(FL_BACKGROUND2_COLOR);
        inp_dxcc_password->selection_color(FL_SELECTION_COLOR);
        inp_dxcc_password->labeltype(FL_NORMAL_LABEL);
        inp_dxcc_password->labelfont(0);
        inp_dxcc_password->labelsize(14);
        inp_dxcc_password->labelcolor(FL_FOREGROUND_COLOR);
        inp_dxcc_password->callback((Fl_Callback*)cb_inp_dxcc_password);
        inp_dxcc_password->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        inp_dxcc_password->when(FL_WHEN_RELEASE);
        o->value(progStatus.dxcc_password.c_str());
        o->type(FL_SECRET_INPUT);
        inp_dxcc_password->labelsize(FL_NORMAL_SIZE);
      } // Fl_Input2* inp_dxcc_password
      { btnDXCLUSTERpasswordShow = new Fl_Button(502, 48, 22, 22, _("?"));
        btnDXCLUSTERpasswordShow->tooltip(_("Show password in plain text"));
        btnDXCLUSTERpasswordShow->callback((Fl_Callback*)cb_btnDXCLUSTERpasswordShow);
      } // Fl_Button* btnDXCLUSTERpasswordShow
      { Fl_Check_Button* o = btn_dxcc_connect = new Fl_Check_Button(570, 33, 101, 15, _("Connect"));
        btn_dxcc_connect->tooltip(_("Connect / Disconnect"));
        btn_dxcc_connect->down_box(FL_DOWN_BOX);
        btn_dxcc_connect->callback((Fl_Callback*)cb_btn_dxcc_connect);
        o->value(progStatus.cluster_connected);
      } // Fl_Check_Button* btn_dxcc_connect
      { lbl_dxc_connected = new Fl_Box(539, 40, 20, 20);
        lbl_dxc_connected->tooltip(_("Connected State"));
        lbl_dxc_connected->box(FL_DIAMOND_DOWN_BOX);
        lbl_dxc_connected->color((Fl_Color)55);
        lbl_dxc_connected->align(Fl_Align(FL_ALIGN_RIGHT));
      } // Fl_Box* lbl_dxc_connected
      { Fl_Check_Button* o = btn_dxc_auto_connect = new Fl_Check_Button(570, 54, 101, 15, _("Auto conn\'"));
        btn_dxc_auto_connect->tooltip(_("Connect to host when starting FLCLUSTER"));
        btn_dxc_auto_connect->down_box(FL_DOWN_BOX);
        btn_dxc_auto_connect->callback((Fl_Callback*)cb_btn_dxc_auto_connect);
        o->value(progStatus.dxc_auto_connect);
      } // Fl_Check_Button* btn_dxc_auto_connect
      o->resizable(inp_dxcc_host_url);
      btn_select_host->end();
    } // Fl_Group* btn_select_host
    { Fl_Tabs* o = cluster_tabs = new Fl_Tabs(0, 78, 680, 340);
      { Fl_Group* o = tabDXclusterTelNetStream = new Fl_Group(0, 100, 680, 314, _("TelNet stream"));
        { Fl_Group* o = gp_resize_telnet = new Fl_Group(2, 102, 676, 276);
          gp_resize_telnet->box(FL_ENGRAVED_FRAME);
          { brws_tcpip_stream = new FTextView(4, 105, 668, 240);
            brws_tcpip_stream->tooltip(_("Cluster server command strings"));
            brws_tcpip_stream->box(FL_DOWN_FRAME);
            brws_tcpip_stream->color(FL_BACKGROUND2_COLOR);
            brws_tcpip_stream->selection_color(FL_SELECTION_COLOR);
            brws_tcpip_stream->labeltype(FL_NORMAL_LABEL);
            brws_tcpip_stream->labelfont(0);
            brws_tcpip_stream->labelsize(13);
            brws_tcpip_stream->labelcolor(FL_FOREGROUND_COLOR);
            brws_tcpip_stream->textfont(13);
            brws_tcpip_stream->align(Fl_Align(FL_ALIGN_TOP));
            brws_tcpip_stream->when(FL_WHEN_RELEASE);
            Fl_Group::current()->resizable(brws_tcpip_stream);
          } // FTextView* brws_tcpip_stream
          { Fl_Button* o = dxc_macro_1 = new Fl_Button(4, 351, 80, 22, _("m1"));
            dxc_macro_1->tooltip(_("DX cluster macro\\nLeft click execute\\nRight click edit"));
            dxc_macro_1->callback((Fl_Callback*)dxc_click_m1);
            o->label(progStatus.dxcm_label_1.c_str());
          } // Fl_Button* dxc_macro_1
          { Fl_Button* o = dxc_macro_2 = new Fl_Button(88, 351, 80, 22, _("m2"));
            dxc_macro_2->callback((Fl_Callback*)dxc_click_m2);
            o->label(progStatus.dxcm_label_2.c_str());
          } // Fl_Button* dxc_macro_2
          { Fl_Button* o = dxc_macro_3 = new Fl_Button(172, 351, 80, 22, _("m3"));
            dxc_macro_3->callback((Fl_Callback*)dxc_click_m3);
            o->label(progStatus.dxcm_label_3.c_str());
          } // Fl_Button* dxc_macro_3
          { Fl_Button* o = dxc_macro_4 = new Fl_Button(256, 351, 80, 22, _("m4"));
            dxc_macro_4->callback((Fl_Callback*)dxc_click_m4);
            o->label(progStatus.dxcm_label_4.c_str());
          } // Fl_Button* dxc_macro_4
          { Fl_Button* o = dxc_macro_5 = new Fl_Button(340, 351, 80, 22, _("m5"));
            dxc_macro_5->callback((Fl_Callback*)dxc_click_m5);
            o->label(progStatus.dxcm_label_5.c_str());
          } // Fl_Button* dxc_macro_5
          { Fl_Button* o = dxc_macro_6 = new Fl_Button(424, 351, 80, 22, _("m6"));
            dxc_macro_6->callback((Fl_Callback*)dxc_click_m6);
            o->label(progStatus.dxcm_label_6.c_str());
          } // Fl_Button* dxc_macro_6
          { Fl_Button* o = dxc_macro_7 = new Fl_Button(508, 351, 80, 22, _("m7"));
            dxc_macro_7->callback((Fl_Callback*)dxc_click_m7);
            o->label(progStatus.dxcm_label_7.c_str());
          } // Fl_Button* dxc_macro_7
          { Fl_Button* o = dxc_macro_8 = new Fl_Button(592, 351, 80, 22, _("m8"));
            dxc_macro_8->tooltip(_("DX cluster macro\\nLeft click execute\\nRight click edit"));
            dxc_macro_8->callback((Fl_Callback*)dxc_click_m8);
            o->label(progStatus.dxcm_label_8.c_str());
          } // Fl_Button* dxc_macro_8
          o->resizable(brws_tcpip_stream);
          gp_resize_telnet->end();
          Fl_Group::current()->resizable(gp_resize_telnet);
        } // Fl_Group* gp_resize_telnet
        { Fl_Group* o = gp_spot_cmds = new Fl_Group(2, 380, 676, 33);
          { inp_dxcluster_cmd = new Fl_Input2(40, 386, 480, 22, _("Cmd:"));
            inp_dxcluster_cmd->tooltip(_("Command string"));
            inp_dxcluster_cmd->box(FL_DOWN_BOX);
            inp_dxcluster_cmd->color(FL_BACKGROUND2_COLOR);
            inp_dxcluster_cmd->selection_color(FL_SELECTION_COLOR);
            inp_dxcluster_cmd->labeltype(FL_NORMAL_LABEL);
            inp_dxcluster_cmd->labelfont(0);
            inp_dxcluster_cmd->labelsize(13);
            inp_dxcluster_cmd->labelcolor(FL_FOREGROUND_COLOR);
            inp_dxcluster_cmd->callback((Fl_Callback*)cb_inp_dxcluster_cmd);
            inp_dxcluster_cmd->align(Fl_Align(FL_ALIGN_LEFT));
            inp_dxcluster_cmd->when(FL_WHEN_ENTER_KEY);
          } // Fl_Input2* inp_dxcluster_cmd
          { btn_cluster_spot = new Fl_Button(524, 386, 70, 22, _("Spot"));
            btn_cluster_spot->tooltip(_("Send SPOT string to server"));
            btn_cluster_spot->callback((Fl_Callback*)cb_btn_cluster_spot);
          } // Fl_Button* btn_cluster_spot
          { btn_cluster_submit = new Fl_Button(599, 386, 70, 22, _("Submit"));
            btn_cluster_submit->tooltip(_("Send command to server"));
            btn_cluster_submit->callback((Fl_Callback*)cb_btn_cluster_submit);
          } // Fl_Button* btn_cluster_submit
          o->resizable(inp_dxcluster_cmd);
          gp_spot_cmds->end();
        } // Fl_Group* gp_spot_cmds
        o->resizable(gp_resize_telnet);
        tabDXclusterTelNetStream->end();
      } // Fl_Group* tabDXclusterTelNetStream
      { Fl_Group* o = tabDXclusterReports = new Fl_Group(0, 100, 680, 314, _("DX Reports"));
        tabDXclusterReports->hide();
        { reports_header = new Fl_Browser(3, 104, 671, 22);
          reports_header->color(FL_LIGHT2);
          reports_header->textfont(4);
          reports_header->when(FL_WHEN_NEVER);
        } // Fl_Browser* reports_header
        { brws_dx_cluster = new Fl_Browser(3, 126, 671, 260);
          brws_dx_cluster->tooltip(_("Left Click to select SPOT"));
          brws_dx_cluster->type(2);
          brws_dx_cluster->textfont(4);
          brws_dx_cluster->callback((Fl_Callback*)cb_brws_dx_cluster);
          brws_dx_cluster->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
          Fl_Group::current()->resizable(brws_dx_cluster);
        } // Fl_Browser* brws_dx_cluster
        { btn_dxc_cluster_clear = new Fl_Button(328, 390, 72, 22, _("Clear"));
          btn_dxc_cluster_clear->tooltip(_("Clear parsed data stream"));
          btn_dxc_cluster_clear->callback((Fl_Callback*)cb_btn_dxc_cluster_clear);
        } // Fl_Button* btn_dxc_cluster_clear
        { Fl_Check_Button* o = brws_order = new Fl_Check_Button(31, 393, 186, 15, _("New entries in first line"));
          brws_order->down_box(FL_DOWN_BOX);
          brws_order->callback((Fl_Callback*)cb_brws_order);
          brws_order->when(FL_WHEN_CHANGED);
          o->value(progStatus.dxc_topline);
        } // Fl_Check_Button* brws_order
        { btn_cluster_spot2 = new Fl_Button(585, 390, 70, 22, _("Spot"));
          btn_cluster_spot2->tooltip(_("Send SPOT string to server"));
          btn_cluster_spot2->callback((Fl_Callback*)cb_btn_cluster_spot2);
        } // Fl_Button* btn_cluster_spot2
        { txtTOD = new Fl_Output(475, 390, 90, 22);
        } // Fl_Output* txtTOD
        { box_keepalive = new Fl_Box(450, 392, 18, 18);
          box_keepalive->box(FL_DIAMOND_DOWN_BOX);
        } // Fl_Box* box_keepalive
        { btn_dxc_cluster_align = new Fl_Button(221, 390, 84, 22, _("Align Cols"));
          btn_dxc_cluster_align->tooltip(_("Align columns after dialog resize"));
          btn_dxc_cluster_align->callback((Fl_Callback*)cb_btn_dxc_cluster_align);
        } // Fl_Button* btn_dxc_cluster_align
        o->resizable(brws_dx_cluster);
        tabDXclusterReports->end();
      } // Fl_Group* tabDXclusterReports
      { Fl_Group* o = tabDXclusterConfig = new Fl_Group(0, 100, 680, 314, _("Cluster Config"));
        tabDXclusterConfig->tooltip(_("Initialization strings for telnet cluster host"));
        tabDXclusterConfig->hide();
        { cc_resize_1 = new Fl_Group(0, 102, 676, 130);
          { Fl_Group* o = new Fl_Group(1, 102, 348, 126);
            { Fl_Browser* o = brws_dxcluster_hosts = new Fl_Browser(4, 121, 278, 100, _("Hosts"));
              brws_dxcluster_hosts->type(2);
              brws_dxcluster_hosts->textfont(4);
              brws_dxcluster_hosts->align(Fl_Align(FL_ALIGN_TOP));
              Fl_Group::current()->resizable(brws_dxcluster_hosts);
              static int widths[]={o->w()*6/10, o->w()*2/10, o->w()*2/10, 0 };
              o->column_widths(widths);
              o->column_char(':');
              dxcluster_hosts_load();
            } // Fl_Browser* brws_dxcluster_hosts
            { Fl_Group* o = new Fl_Group(285, 118, 60, 108);
              { btn_dxcluster_hosts_select = new Fl_Button(288, 120, 54, 22, _("Select"));
                btn_dxcluster_hosts_select->tooltip(_("Select highlighted DX cluster host"));
                btn_dxcluster_hosts_select->callback((Fl_Callback*)dxcluster_hosts_select);
              } // Fl_Button* btn_dxcluster_hosts_select
              { btn_dxcluster_hosts_add = new Fl_Button(288, 146, 54, 22, _("Add"));
                btn_dxcluster_hosts_add->tooltip(_("Add current DX cluster host"));
                btn_dxcluster_hosts_add->callback((Fl_Callback*)dxcluster_hosts_add);
              } // Fl_Button* btn_dxcluster_hosts_add
              { btn_dxcluster_hosts_delete = new Fl_Button(288, 172, 54, 22, _("Delete"));
                btn_dxcluster_hosts_delete->tooltip(_("Delete highlighted DX cluster host"));
                btn_dxcluster_hosts_delete->callback((Fl_Callback*)dxcluster_hosts_delete);
              } // Fl_Button* btn_dxcluster_hosts_delete
              { btn_dxcluster_servers = new Fl_Button(288, 198, 54, 22, _("Srvrs"));
                btn_dxcluster_servers->tooltip(_("Server List"));
                btn_dxcluster_servers->callback((Fl_Callback*)dxcluster_servers);
              } // Fl_Button* btn_dxcluster_servers
              { gp_resize_dummy1 = new Fl_Group(288, 222, 54, 4);
                gp_resize_dummy1->end();
                Fl_Group::current()->resizable(gp_resize_dummy1);
              } // Fl_Group* gp_resize_dummy1
              o->resizable(gp_resize_dummy1);
              o->end();
            } // Fl_Group* o
            o->resizable(brws_dxcluster_hosts);
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(350, 102, 325, 104);
            { ed_telnet_cmds = new FTextEdit(354, 121, 248, 80, _("Cluster Server Setup Cmds"));
              ed_telnet_cmds->tooltip(_("Cluster server command strings"));
              ed_telnet_cmds->box(FL_DOWN_FRAME);
              ed_telnet_cmds->color(FL_BACKGROUND2_COLOR);
              ed_telnet_cmds->selection_color(FL_SELECTION_COLOR);
              ed_telnet_cmds->labeltype(FL_NORMAL_LABEL);
              ed_telnet_cmds->labelfont(0);
              ed_telnet_cmds->labelsize(14);
              ed_telnet_cmds->labelcolor(FL_FOREGROUND_COLOR);
              ed_telnet_cmds->textfont(13);
              ed_telnet_cmds->align(Fl_Align(FL_ALIGN_TOP));
              ed_telnet_cmds->when(FL_WHEN_RELEASE);
              Fl_Group::current()->resizable(ed_telnet_cmds);
            } // FTextEdit* ed_telnet_cmds
            { Fl_Group* o = new Fl_Group(605, 116, 68, 89);
              { btn_dxcluster_hosts_load_setup = new Fl_Button(610, 121, 59, 22, _("Load"));
                btn_dxcluster_hosts_load_setup->tooltip(_("Load Cluster Setup Commands"));
                btn_dxcluster_hosts_load_setup->callback((Fl_Callback*)dxcluster_hosts_load_setup);
              } // Fl_Button* btn_dxcluster_hosts_load_setup
              { btn_dxcluster_hosts_save_setup = new Fl_Button(610, 150, 59, 22, _("Save"));
                btn_dxcluster_hosts_save_setup->tooltip(_("Save Cluster Setup Commands"));
                btn_dxcluster_hosts_save_setup->callback((Fl_Callback*)dxcluster_hosts_save_setup);
              } // Fl_Button* btn_dxcluster_hosts_save_setup
              { btn_dxcluster_hosts_send_setup = new Fl_Button(610, 179, 59, 22, _("Send"));
                btn_dxcluster_hosts_send_setup->tooltip(_("Send Commands to Cluster Server"));
                btn_dxcluster_hosts_send_setup->callback((Fl_Callback*)dxcluster_hosts_send_setup);
              } // Fl_Button* btn_dxcluster_hosts_send_setup
              { gp_resize_dummy2 = new Fl_Group(610, 202, 59, 2);
                gp_resize_dummy2->end();
                Fl_Group::current()->resizable(gp_resize_dummy2);
              } // Fl_Group* gp_resize_dummy2
              o->resizable(gp_resize_dummy2);
              o->end();
            } // Fl_Group* o
            o->resizable(ed_telnet_cmds);
            o->end();
          } // Fl_Group* o
          { Fl_Check_Button* o = btn_spot_when_logged = new Fl_Check_Button(354, 208, 146, 15, _("Spot when logged"));
            btn_spot_when_logged->tooltip(_("Create DX spot when logging contact"));
            btn_spot_when_logged->down_box(FL_DOWN_BOX);
            btn_spot_when_logged->callback((Fl_Callback*)cb_btn_spot_when_logged);
            o->value(progStatus.spot_when_logged);
          } // Fl_Check_Button* btn_spot_when_logged
          { Fl_Check_Button* o = btn_dxc_hertz = new Fl_Check_Button(512, 208, 146, 15, _("Report [0..99 Hz]"));
            btn_dxc_hertz->tooltip(_("Add [0..99] Hz WF value to DX report notes"));
            btn_dxc_hertz->down_box(FL_DOWN_BOX);
            btn_dxc_hertz->callback((Fl_Callback*)cb_btn_dxc_hertz);
            o->value(progStatus.dxc_hertz);
          } // Fl_Check_Button* btn_dxc_hertz
          cc_resize_1->end();
          Fl_Group::current()->resizable(cc_resize_1);
        } // Fl_Group* cc_resize_1
        { Fl_Group* o = new Fl_Group(0, 238, 676, 174);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { Fl_Group* o = new Fl_Group(1, 238, 307, 170);
            { Fl_Input* o = mlabel_1 = new Fl_Input(5, 258, 80, 22, _("label 1"));
              mlabel_1->callback((Fl_Callback*)cb_mlabel_1);
              mlabel_1->align(Fl_Align(FL_ALIGN_TOP));
              o->value(progStatus.dxcm_label_1.c_str());
            } // Fl_Input* mlabel_1
            { Fl_Input2* o = mtext_1 = new Fl_Input2(87, 258, 220, 22, _("macro text"));
              mtext_1->box(FL_DOWN_BOX);
              mtext_1->color(FL_BACKGROUND2_COLOR);
              mtext_1->selection_color(FL_SELECTION_COLOR);
              mtext_1->labeltype(FL_NORMAL_LABEL);
              mtext_1->labelfont(0);
              mtext_1->labelsize(14);
              mtext_1->labelcolor(FL_FOREGROUND_COLOR);
              mtext_1->callback((Fl_Callback*)cb_mtext_1);
              mtext_1->align(Fl_Align(FL_ALIGN_TOP));
              mtext_1->when(FL_WHEN_RELEASE);
              o->value(progStatus.dxcm_text_1.c_str());
            } // Fl_Input2* mtext_1
            { Fl_Input* o = mlabel_2 = new Fl_Input(5, 298, 80, 22, _("label 2"));
              mlabel_2->callback((Fl_Callback*)cb_mlabel_2);
              mlabel_2->align(Fl_Align(FL_ALIGN_TOP));
              o->value(progStatus.dxcm_label_2.c_str());
            } // Fl_Input* mlabel_2
            { Fl_Input2* o = mtext_2 = new Fl_Input2(87, 298, 220, 22);
              mtext_2->box(FL_DOWN_BOX);
              mtext_2->color(FL_BACKGROUND2_COLOR);
              mtext_2->selection_color(FL_SELECTION_COLOR);
              mtext_2->labeltype(FL_NORMAL_LABEL);
              mtext_2->labelfont(0);
              mtext_2->labelsize(14);
              mtext_2->labelcolor(FL_FOREGROUND_COLOR);
              mtext_2->callback((Fl_Callback*)cb_mtext_2);
              mtext_2->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
              mtext_2->when(FL_WHEN_RELEASE);
              o->value(progStatus.dxcm_text_2.c_str());
            } // Fl_Input2* mtext_2
            { Fl_Input* o = mlabel_3 = new Fl_Input(5, 338, 80, 22, _("label 3"));
              mlabel_3->callback((Fl_Callback*)cb_mlabel_3);
              mlabel_3->align(Fl_Align(FL_ALIGN_TOP));
              o->value(progStatus.dxcm_label_3.c_str());
            } // Fl_Input* mlabel_3
            { Fl_Input2* o = mtext_3 = new Fl_Input2(87, 338, 220, 22);
              mtext_3->box(FL_DOWN_BOX);
              mtext_3->color(FL_BACKGROUND2_COLOR);
              mtext_3->selection_color(FL_SELECTION_COLOR);
              mtext_3->labeltype(FL_NORMAL_LABEL);
              mtext_3->labelfont(0);
              mtext_3->labelsize(14);
              mtext_3->labelcolor(FL_FOREGROUND_COLOR);
              mtext_3->callback((Fl_Callback*)cb_mtext_3);
              mtext_3->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
              mtext_3->when(FL_WHEN_RELEASE);
              o->value(progStatus.dxcm_text_3.c_str());
            } // Fl_Input2* mtext_3
            { Fl_Input* o = mlabel_4 = new Fl_Input(5, 378, 80, 22, _("label 4"));
              mlabel_4->callback((Fl_Callback*)cb_mlabel_4);
              mlabel_4->align(Fl_Align(FL_ALIGN_TOP));
              o->value(progStatus.dxcm_label_4.c_str());
            } // Fl_Input* mlabel_4
            { Fl_Input2* o = mtext_4 = new Fl_Input2(87, 378, 220, 22);
              mtext_4->box(FL_DOWN_BOX);
              mtext_4->color(FL_BACKGROUND2_COLOR);
              mtext_4->selection_color(FL_SELECTION_COLOR);
              mtext_4->labeltype(FL_NORMAL_LABEL);
              mtext_4->labelfont(0);
              mtext_4->labelsize(14);
              mtext_4->labelcolor(FL_FOREGROUND_COLOR);
              mtext_4->callback((Fl_Callback*)cb_mtext_4);
              mtext_4->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
              mtext_4->when(FL_WHEN_RELEASE);
              o->value(progStatus.dxcm_text_4.c_str());
            } // Fl_Input2* mtext_4
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(308, 238, 307, 170);
            { Fl_Input* o = mlabel_5 = new Fl_Input(310, 257, 80, 22, _("label 5"));
              mlabel_5->callback((Fl_Callback*)cb_mlabel_5);
              mlabel_5->align(Fl_Align(FL_ALIGN_TOP));
              o->value(progStatus.dxcm_label_5.c_str());
            } // Fl_Input* mlabel_5
            { Fl_Input2* o = mtext_5 = new Fl_Input2(391, 257, 220, 22, _("macro text"));
              mtext_5->box(FL_DOWN_BOX);
              mtext_5->color(FL_BACKGROUND2_COLOR);
              mtext_5->selection_color(FL_SELECTION_COLOR);
              mtext_5->labeltype(FL_NORMAL_LABEL);
              mtext_5->labelfont(0);
              mtext_5->labelsize(14);
              mtext_5->labelcolor(FL_FOREGROUND_COLOR);
              mtext_5->callback((Fl_Callback*)cb_mtext_5);
              mtext_5->align(Fl_Align(FL_ALIGN_TOP));
              mtext_5->when(FL_WHEN_RELEASE);
              o->value(progStatus.dxcm_text_5.c_str());
            } // Fl_Input2* mtext_5
            { Fl_Input* o = mlabel_6 = new Fl_Input(310, 297, 80, 22, _("label 6"));
              mlabel_6->callback((Fl_Callback*)cb_mlabel_6);
              mlabel_6->align(Fl_Align(FL_ALIGN_TOP));
              o->value(progStatus.dxcm_label_6.c_str());
            } // Fl_Input* mlabel_6
            { Fl_Input2* o = mtext_6 = new Fl_Input2(391, 297, 220, 22);
              mtext_6->box(FL_DOWN_BOX);
              mtext_6->color(FL_BACKGROUND2_COLOR);
              mtext_6->selection_color(FL_SELECTION_COLOR);
              mtext_6->labeltype(FL_NORMAL_LABEL);
              mtext_6->labelfont(0);
              mtext_6->labelsize(14);
              mtext_6->labelcolor(FL_FOREGROUND_COLOR);
              mtext_6->callback((Fl_Callback*)cb_mtext_6);
              mtext_6->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
              mtext_6->when(FL_WHEN_RELEASE);
              o->value(progStatus.dxcm_text_6.c_str());
            } // Fl_Input2* mtext_6
            { Fl_Input* o = mlabel_7 = new Fl_Input(310, 337, 80, 22, _("label 7"));
              mlabel_7->callback((Fl_Callback*)cb_mlabel_7);
              mlabel_7->align(Fl_Align(FL_ALIGN_TOP));
              o->value(progStatus.dxcm_label_7.c_str());
            } // Fl_Input* mlabel_7
            { Fl_Input2* o = mtext_7 = new Fl_Input2(391, 337, 220, 22);
              mtext_7->box(FL_DOWN_BOX);
              mtext_7->color(FL_BACKGROUND2_COLOR);
              mtext_7->selection_color(FL_SELECTION_COLOR);
              mtext_7->labeltype(FL_NORMAL_LABEL);
              mtext_7->labelfont(0);
              mtext_7->labelsize(14);
              mtext_7->labelcolor(FL_FOREGROUND_COLOR);
              mtext_7->callback((Fl_Callback*)cb_mtext_7);
              mtext_7->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
              mtext_7->when(FL_WHEN_RELEASE);
              o->value(progStatus.dxcm_text_7.c_str());
            } // Fl_Input2* mtext_7
            { Fl_Input* o = mlabel_8 = new Fl_Input(310, 377, 80, 22, _("label 8"));
              mlabel_8->callback((Fl_Callback*)cb_mlabel_8);
              mlabel_8->align(Fl_Align(FL_ALIGN_TOP));
              o->value(progStatus.dxcm_label_8.c_str());
            } // Fl_Input* mlabel_8
            { Fl_Input2* o = mtext_8 = new Fl_Input2(391, 377, 220, 22);
              mtext_8->box(FL_DOWN_BOX);
              mtext_8->color(FL_BACKGROUND2_COLOR);
              mtext_8->selection_color(FL_SELECTION_COLOR);
              mtext_8->labeltype(FL_NORMAL_LABEL);
              mtext_8->labelfont(0);
              mtext_8->labelsize(14);
              mtext_8->labelcolor(FL_FOREGROUND_COLOR);
              mtext_8->callback((Fl_Callback*)cb_mtext_8);
              mtext_8->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
              mtext_8->when(FL_WHEN_RELEASE);
              o->value(progStatus.dxcm_text_8.c_str());
            } // Fl_Input2* mtext_8
            o->end();
          } // Fl_Group* o
          { btn_dxcluster_ar_help = new Fl_Button(618, 250, 56, 22, _("AR ?"));
            btn_dxcluster_ar_help->tooltip(_("AR Commands"));
            btn_dxcluster_ar_help->callback((Fl_Callback*)dxcluster_ar_help);
          } // Fl_Button* btn_dxcluster_ar_help
          { btn_dxcluster_cc_help = new Fl_Button(618, 292, 56, 22, _("CC ?"));
            btn_dxcluster_cc_help->tooltip(_("CC Commands"));
            btn_dxcluster_cc_help->callback((Fl_Callback*)dxcluster_cc_help);
          } // Fl_Button* btn_dxcluster_cc_help
          { btn_dxcluster_dx_help = new Fl_Button(618, 335, 56, 22, _("DX ?"));
            btn_dxcluster_dx_help->tooltip(_("Spider Commands"));
            btn_dxcluster_dx_help->callback((Fl_Callback*)dxcluster_dx_help);
          } // Fl_Button* btn_dxcluster_dx_help
          o->end();
        } // Fl_Group* o
        o->resizable(cc_resize_1);
        tabDXclusterConfig->end();
      } // Fl_Group* tabDXclusterConfig
      { Fl_Group* o = tabIOconfig = new Fl_Group(0, 100, 680, 315, _("I/O config"));
        tabIOconfig->hide();
        { Fl_Group* o = new Fl_Group(10, 110, 389, 150, _("Fldigi/Flrig Interface"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { Fl_Check_Button* o = btn_connect_to_fldigi = new Fl_Check_Button(25, 143, 142, 15, _("Connect to Fldigi"));
            btn_connect_to_fldigi->down_box(FL_DOWN_BOX);
            btn_connect_to_fldigi->callback((Fl_Callback*)cb_btn_connect_to_fldigi);
            btn_connect_to_fldigi->when(FL_WHEN_CHANGED);
            o->value(progStatus.connect_to_fldigi);
          } // Fl_Check_Button* btn_connect_to_fldigi
          { Fl_Input* o = inp_fldigi_address = new Fl_Input(25, 179, 357, 24, _("Fldigi Socket Address:"));
            inp_fldigi_address->callback((Fl_Callback*)cb_inp_fldigi_address);
            inp_fldigi_address->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            o->value(progStatus.fldigi_address.c_str());
          } // Fl_Input* inp_fldigi_address
          { Fl_Input* o = inp_fldigi_port = new Fl_Input(25, 225, 123, 24, _("Fldigi Socket Port:"));
            inp_fldigi_port->callback((Fl_Callback*)cb_inp_fldigi_port);
            inp_fldigi_port->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            o->value(progStatus.fldigi_port.c_str());
          } // Fl_Input* inp_fldigi_port
          { lbl_fldigi_connected = new Fl_Box(185, 140, 20, 20, _("Connected"));
            lbl_fldigi_connected->tooltip(_("Connected State"));
            lbl_fldigi_connected->box(FL_DIAMOND_DOWN_BOX);
            lbl_fldigi_connected->color((Fl_Color)55);
            lbl_fldigi_connected->align(Fl_Align(FL_ALIGN_RIGHT));
          } // Fl_Box* lbl_fldigi_connected
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(400, 110, 269, 296, _("RF/AF Spotting"));
          o->box(FL_ENGRAVED_BOX);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { Fl_Counter* o = intPSKsweetspot = new Fl_Counter(420, 149, 119, 22, _("PSK sweet spot"));
            intPSKsweetspot->minimum(500);
            intPSKsweetspot->maximum(2500);
            intPSKsweetspot->step(10);
            intPSKsweetspot->value(1500);
            intPSKsweetspot->callback((Fl_Callback*)cb_intPSKsweetspot);
            intPSKsweetspot->align(Fl_Align(FL_ALIGN_RIGHT));
            o->value(progStatus.PSKsweetspot);
            o->lstep(100);
          } // Fl_Counter* intPSKsweetspot
          { Fl_Check_Button* o = btn_PSK_on_USB = new Fl_Check_Button(435, 184, 198, 15, _("PSK mode is USB on xcvr"));
            btn_PSK_on_USB->down_box(FL_DOWN_BOX);
            btn_PSK_on_USB->callback((Fl_Callback*)cb_btn_PSK_on_USB);
            o->value(progStatus.USB);
          } // Fl_Check_Button* btn_PSK_on_USB
          { Fl_Counter* o = intCWsweetspot = new Fl_Counter(420, 213, 119, 22, _("CW sweet spot"));
            intCWsweetspot->minimum(500);
            intCWsweetspot->maximum(2500);
            intCWsweetspot->step(10);
            intCWsweetspot->value(1500);
            intCWsweetspot->callback((Fl_Callback*)cb_intCWsweetspot);
            intCWsweetspot->align(Fl_Align(FL_ALIGN_RIGHT));
            o->value(progStatus.CWsweetspot);
            o->lstep(100);
          } // Fl_Counter* intCWsweetspot
          { Fl_Check_Button* o = btn_cw_mode_is_USB = new Fl_Check_Button(435, 249, 198, 15, _("CW mode is USB on xcvr"));
            btn_cw_mode_is_USB->down_box(FL_DOWN_BOX);
            btn_cw_mode_is_USB->callback((Fl_Callback*)cb_btn_cw_mode_is_USB);
            o->value(progStatus.USBCW);
          } // Fl_Check_Button* btn_cw_mode_is_USB
          { Fl_Check_Button* o = btn_cw_mode_is_LSB = new Fl_Check_Button(435, 277, 198, 15, _("CW mode is LSB on xcvr"));
            btn_cw_mode_is_LSB->down_box(FL_DOWN_BOX);
            btn_cw_mode_is_LSB->callback((Fl_Callback*)cb_btn_cw_mode_is_LSB);
            o->value(progStatus.LSBCW);
          } // Fl_Check_Button* btn_cw_mode_is_LSB
          { Fl_Check_Button* o = btn_cw_mode_is_CW = new Fl_Check_Button(435, 305, 198, 15, _("CW mode is CW on xcvr"));
            btn_cw_mode_is_CW->down_box(FL_DOWN_BOX);
            btn_cw_mode_is_CW->callback((Fl_Callback*)cb_btn_cw_mode_is_CW);
            o->value(!progStatus.LSBCW && !progStatus.USBCW);
          } // Fl_Check_Button* btn_cw_mode_is_CW
          { Fl_Check_Button* o = btn_rtty_is_mark = new Fl_Check_Button(435, 370, 198, 15, _("RTTY tuned to Mark Freq"));
            btn_rtty_is_mark->down_box(FL_DOWN_BOX);
            btn_rtty_is_mark->callback((Fl_Callback*)cb_btn_rtty_is_mark);
            o->value(!progStatus.useMARKfreq);
          } // Fl_Check_Button* btn_rtty_is_mark
          { Fl_Counter* o = intRTTYsweetspot = new Fl_Counter(420, 334, 119, 22, _("RTTY sweet spot"));
            intRTTYsweetspot->minimum(500);
            intRTTYsweetspot->maximum(2500);
            intRTTYsweetspot->step(10);
            intRTTYsweetspot->value(1500);
            intRTTYsweetspot->callback((Fl_Callback*)cb_intRTTYsweetspot);
            intRTTYsweetspot->align(Fl_Align(FL_ALIGN_RIGHT));
            o->value(progStatus.RTTYsweetspot);
            o->lstep(100);
          } // Fl_Counter* intRTTYsweetspot
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 261, 389, 145, _("Server Help URLs"));
          o->box(FL_ENGRAVED_BOX);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { Fl_Input* o = serversURL = new Fl_Input(58, 285, 337, 24, _("Srvrs:"));
            serversURL->tooltip(_("enter INTERNAL to use local html"));
            serversURL->callback((Fl_Callback*)cb_serversURL);
            o->value(progStatus.serversURL.c_str());
          } // Fl_Input* serversURL
          { Fl_Input* o = AR_help_URL = new Fl_Input(58, 313, 337, 24, _("AR:"));
            AR_help_URL->tooltip(_("enter INTERNAL to use local html"));
            AR_help_URL->callback((Fl_Callback*)cb_AR_help_URL);
            o->value(progStatus.AR_help_URL.c_str());
          } // Fl_Input* AR_help_URL
          { Fl_Input* o = CC_help_URL = new Fl_Input(58, 342, 337, 24, _("CC:"));
            CC_help_URL->tooltip(_("enter INTERNAL to use local html"));
            CC_help_URL->callback((Fl_Callback*)cb_CC_help_URL);
            o->value(progStatus.CC_help_URL.c_str());
          } // Fl_Input* CC_help_URL
          { Fl_Input* o = DX_help_URL = new Fl_Input(58, 371, 337, 24, _("DX:"));
            DX_help_URL->tooltip(_("enter INTERNAL to use local html"));
            DX_help_URL->callback((Fl_Callback*)cb_DX_help_URL);
            o->value(progStatus.DX_help_URL.c_str());
          } // Fl_Input* DX_help_URL
          o->end();
        } // Fl_Group* o
        { gp_resize_io = new Fl_Group(10, 407, 660, 5);
          gp_resize_io->end();
        } // Fl_Group* gp_resize_io
        o->resizable(gp_resize_io);
        tabIOconfig->end();
      } // Fl_Group* tabIOconfig
      { Fl_Group* o = tabUserConfig = new Fl_Group(0, 100, 680, 315, _("User Config"));
        tabUserConfig->hide();
        { Fl_Group* o = new Fl_Group(5, 106, 315, 160, _("Personal Info"));
          o->box(FL_ENGRAVED_BOX);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { Fl_Input* o = inp_myCall = new Fl_Input(71, 135, 160, 22, _("Call"));
            inp_myCall->callback((Fl_Callback*)cb_inp_myCall);
            inp_myCall->when(FL_WHEN_CHANGED);
            o->value(progStatus.myCall.c_str());
          } // Fl_Input* inp_myCall
          { Fl_Input* o = inp_myName = new Fl_Input(71, 167, 160, 22, _("Name"));
            inp_myName->callback((Fl_Callback*)cb_inp_myName);
            inp_myName->when(FL_WHEN_CHANGED);
            o->value(progStatus.myName.c_str());
          } // Fl_Input* inp_myName
          { Fl_Input* o = inp_myQth = new Fl_Input(71, 199, 160, 22, _("Qth"));
            inp_myQth->callback((Fl_Callback*)cb_inp_myQth);
            inp_myQth->when(FL_WHEN_CHANGED);
            o->value(progStatus.myQth.c_str());
          } // Fl_Input* inp_myQth
          { Fl_Input* o = inp_myLocator = new Fl_Input(71, 232, 160, 22, _("Locator"));
            inp_myLocator->callback((Fl_Callback*)cb_inp_myLocator);
            inp_myLocator->when(FL_WHEN_CHANGED);
            o->value(progStatus.myLocator.c_str());
          } // Fl_Input* inp_myLocator
          { btn_send_name = new Fl_Button(243, 167, 70, 22, _("Update"));
            btn_send_name->tooltip(_("update change to server"));
            btn_send_name->callback((Fl_Callback*)cb_btn_send_name);
          } // Fl_Button* btn_send_name
          { btn_send_qth = new Fl_Button(243, 199, 70, 22, _("Update"));
            btn_send_qth->tooltip(_("update change to server"));
            btn_send_qth->callback((Fl_Callback*)cb_btn_send_qth);
          } // Fl_Button* btn_send_qth
          { btn_send_qra = new Fl_Button(243, 232, 70, 22, _("Update"));
            btn_send_qra->tooltip(_("update change to server"));
            btn_send_qra->callback((Fl_Callback*)cb_btn_send_qra);
          } // Fl_Button* btn_send_qra
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(5, 268, 670, 137);
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
          { Fl_Output* o = DXC_display = new Fl_Output(24, 293, 184, 25, _("Report Browser"));
            DXC_display->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            o->textfont(progStatus.DXC_textfont);o->textsize(progStatus.DXC_textsize);
            o->value("DX de W1HKJ-1");
            o->redraw();
          } // Fl_Output* DXC_display
          { btn_DXC_font = new Fl_Button(213, 293, 86, 25, _("Font"));
            btn_DXC_font->callback((Fl_Callback*)cb_btn_DXC_font);
          } // Fl_Button* btn_DXC_font
          { btnDXCdefault_colors_font = new Fl_Button(305, 293, 86, 25, _("Default"));
            btnDXCdefault_colors_font->callback((Fl_Callback*)cb_btnDXCdefault_colors_font);
          } // Fl_Button* btnDXCdefault_colors_font
          { Fl_Button* o = btn_DXC_even_lines = new Fl_Button(213, 324, 86, 25, _("Even Lines"));
            btn_DXC_even_lines->color((Fl_Color)55);
            btn_DXC_even_lines->callback((Fl_Callback*)cb_btn_DXC_even_lines);
            o->color(progStatus.DXC_even_color);
          } // Fl_Button* btn_DXC_even_lines
          { Fl_Button* o = btn_DXC_odd_lines = new Fl_Button(305, 324, 86, 25, _("Odd Lines"));
            btn_DXC_odd_lines->color((Fl_Color)246);
            btn_DXC_odd_lines->callback((Fl_Callback*)cb_btn_DXC_odd_lines);
            o->color(progStatus.DXC_odd_color);
          } // Fl_Button* btn_DXC_odd_lines
          { Fl_Input* o = StreamText = new Fl_Input(24, 363, 184, 25, _("Stream Text"));
            StreamText->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            o->value("DX de W1HKJ...");
            o->color(fl_rgb_color(progStatus.DX_Color_R, progStatus.DX_Color_G, progStatus.DX_Color_B));
            o->textfont(progStatus.DXfontnbr); o->textsize(progStatus.DXfontsize); o->textcolor(progStatus.DXfontcolor);
          } // Fl_Input* StreamText
          { btnDXcolor = new Fl_Button(213, 363, 86, 25, _("Bg color"));
            btnDXcolor->callback((Fl_Callback*)cb_btnDXcolor);
          } // Fl_Button* btnDXcolor
          { btnDXfont = new Fl_Button(305, 363, 86, 25, _("Font"));
            btnDXfont->callback((Fl_Callback*)cb_btnDXfont);
          } // Fl_Button* btnDXfont
          { Fl_Button* o = btnDXalt_color = new Fl_Button(397, 362, 86, 25, _("Alt Color"));
            btnDXalt_color->tooltip(_("Color for outgoing telnet text"));
            btnDXalt_color->callback((Fl_Callback*)cb_btnDXalt_color);
            o->labelcolor(progStatus.DXalt_color);
          } // Fl_Button* btnDXalt_color
          { btnDXdefault_colors_font = new Fl_Button(491, 362, 86, 25, _("Default"));
            btnDXdefault_colors_font->callback((Fl_Callback*)cb_btnDXdefault_colors_font);
          } // Fl_Button* btnDXdefault_colors_font
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(325, 106, 175, 160, _("Keepalive signal"));
          o->box(FL_ENGRAVED_BOX);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { Fl_Round_Button* o = btn_zero_keepalive = new Fl_Round_Button(340, 138, 151, 26, _("never"));
            btn_zero_keepalive->tooltip(_("disable keep alive signal"));
            btn_zero_keepalive->down_box(FL_ROUND_DOWN_BOX);
            btn_zero_keepalive->callback((Fl_Callback*)cb_btn_zero_keepalive);
            o->value(progStatus.keepalive == 0);
          } // Fl_Round_Button* btn_zero_keepalive
          { Fl_Round_Button* o = btn_one_keepalive = new Fl_Round_Button(340, 166, 151, 26, _("every minute"));
            btn_one_keepalive->tooltip(_("send keepalive signal every minute"));
            btn_one_keepalive->down_box(FL_ROUND_DOWN_BOX);
            btn_one_keepalive->callback((Fl_Callback*)cb_btn_one_keepalive);
            o->value(progStatus.keepalive == 1);
          } // Fl_Round_Button* btn_one_keepalive
          { Fl_Round_Button* o = btn_five_keepalive = new Fl_Round_Button(340, 194, 151, 26, _("every 5 minutes"));
            btn_five_keepalive->tooltip(_("send keepalive signal every 5 minutes"));
            btn_five_keepalive->down_box(FL_ROUND_DOWN_BOX);
            btn_five_keepalive->callback((Fl_Callback*)cb_btn_five_keepalive);
            o->value(progStatus.keepalive == 5);
          } // Fl_Round_Button* btn_five_keepalive
          { Fl_Round_Button* o = btn_ten_keepalive = new Fl_Round_Button(340, 224, 151, 25, _("every 10 minutes"));
            btn_ten_keepalive->tooltip(_("send keepalive signal every 10 minutes"));
            btn_ten_keepalive->down_box(FL_ROUND_DOWN_BOX);
            btn_ten_keepalive->callback((Fl_Callback*)cb_btn_ten_keepalive);
            o->value(progStatus.keepalive == 10);
          } // Fl_Round_Button* btn_ten_keepalive
          o->end();
        } // Fl_Group* o
        { grp_misc = new Fl_Group(505, 106, 170, 160, _("Miscellaneous"));
          grp_misc->box(FL_ENGRAVED_BOX);
          grp_misc->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { Fl_Check_Button* o = btn_tooltips = new Fl_Check_Button(525, 143, 78, 15, _("Enable Tooltips"));
            btn_tooltips->down_box(FL_DOWN_BOX);
            btn_tooltips->value(1);
            btn_tooltips->callback((Fl_Callback*)cb_btn_tooltips);
            o->value(progStatus.tooltips);
          } // Fl_Check_Button* btn_tooltips
          grp_misc->end();
        } // Fl_Group* grp_misc
        { grp_resize_uc = new Fl_Group(5, 405, 670, 7);
          grp_resize_uc->end();
          Fl_Group::current()->resizable(grp_resize_uc);
        } // Fl_Group* grp_resize_uc
        o->resizable(grp_resize_uc);
        tabUserConfig->end();
      } // Fl_Group* tabUserConfig
      { Fl_Group* o = tabDXclusterHelp = new Fl_Group(0, 100, 680, 314, _("Cluster Help"));
        tabDXclusterHelp->hide();
        { brws_dxc_help = new FTextView(3, 104, 673, 281);
          brws_dxc_help->tooltip(_("Cluster server command strings"));
          brws_dxc_help->box(FL_DOWN_FRAME);
          brws_dxc_help->color(FL_BACKGROUND2_COLOR);
          brws_dxc_help->selection_color(FL_SELECTION_COLOR);
          brws_dxc_help->labeltype(FL_NORMAL_LABEL);
          brws_dxc_help->labelfont(0);
          brws_dxc_help->labelsize(13);
          brws_dxc_help->labelcolor(FL_FOREGROUND_COLOR);
          brws_dxc_help->textfont(13);
          brws_dxc_help->align(Fl_Align(FL_ALIGN_TOP));
          brws_dxc_help->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(brws_dxc_help);
        } // FTextView* brws_dxc_help
        { btn_dxc_help_query = new Fl_Button(441, 388, 70, 22, _("Get Help"));
          btn_dxc_help_query->tooltip(_("Get Help from cluster server"));
          btn_dxc_help_query->callback((Fl_Callback*)cb_btn_dxc_help_query);
        } // Fl_Button* btn_dxc_help_query
        { inp_help_string = new Fl_Input2(265, 388, 172, 22, _("Help on:"));
          inp_help_string->tooltip(_("Leave blank for general help\nEnter subject, e.g. DX"));
          inp_help_string->box(FL_DOWN_BOX);
          inp_help_string->color(FL_BACKGROUND2_COLOR);
          inp_help_string->selection_color(FL_SELECTION_COLOR);
          inp_help_string->labeltype(FL_NORMAL_LABEL);
          inp_help_string->labelfont(0);
          inp_help_string->labelsize(13);
          inp_help_string->labelcolor(FL_FOREGROUND_COLOR);
          inp_help_string->callback((Fl_Callback*)cb_inp_help_string);
          inp_help_string->align(Fl_Align(FL_ALIGN_LEFT));
          inp_help_string->when(FL_WHEN_ENTER_KEY);
        } // Fl_Input2* inp_help_string
        { btn_dxc_help_clear = new Fl_Button(517, 388, 71, 22, _("Clear"));
          btn_dxc_help_clear->tooltip(_("Clear help panel"));
          btn_dxc_help_clear->callback((Fl_Callback*)cb_btn_dxc_help_clear);
        } // Fl_Button* btn_dxc_help_clear
        o->resizable(brws_dxc_help);
        tabDXclusterHelp->end();
      } // Fl_Group* tabDXclusterHelp
      o->resizable(tabDXclusterReports);
      cluster_tabs->end();
      Fl_Group::current()->resizable(cluster_tabs);
    } // Fl_Tabs* cluster_tabs
    o->resizable(cluster_tabs);
    o->size_range(680,420,0,0);
    o->end();
  } // Fl_Double_Window* o
  return w;
}
